import React, { useState, useRef } from 'react';
import { useRouter } from 'next/navigation';
import CourseProfessorsList from './CourseProfessorsList';

interface Course {
  id: string;
  name: string;
  code: string;
  description: string;
}

interface DepartmentCoursesProps {
  departmentId: string;
  onSelectCourse: (courseId: string) => void;
}

const DepartmentCourses: React.FC<DepartmentCoursesProps> = ({
  departmentId,
  onSelectCourse
}) => {
  const router = useRouter();
  const [selectedCourse, setSelectedCourse] = useState<string | null>(null);
  const professorsScrollRef = useRef<HTMLDivElement>(null);

  // Department colors and icons for visual consistency
  const departmentStyles: Record<string, { bgColor: string, icon: string }> = {
    "Ciencias de la ComputaciÃ³n": { bgColor: "bg-blue-50", icon: "ðŸ’»" },
    "IngenierÃ­a Civil MatemÃ¡tica": { bgColor: "bg-green-50", icon: "ðŸ“Š" },
    "IngenierÃ­a Civil ElÃ©ctrica": { bgColor: "bg-yellow-50", icon: "âš¡" },
    "AstronomÃ­a": { bgColor: "bg-purple-50", icon: "ðŸ”­" }
  };

  // Mock courses data by department
  const coursesMap: Record<string, Course[]> = {
    "Ciencias de la ComputaciÃ³n": [
      {
        id: "CC3001",
        name: "Algoritmos y Estructuras de Datos",
        code: "CC3001",
        description: "DiseÃ±o e implementaciÃ³n de algoritmos eficientes y estructuras de datos avanzadas"
      },
      {
        id: "CC4101",
        name: "Lenguajes de ProgramaciÃ³n",
        code: "CC4101",
        description: "Estudio de paradigmas y caracterÃ­sticas de lenguajes de programaciÃ³n"
      },
      {
        id: "CC5205",
        name: "MinerÃ­a de Datos",
        code: "CC5205",
        description: "TÃ©cnicas y algoritmos para extraer conocimiento a partir de grandes volÃºmenes de datos"
      }
    ],
    "IngenierÃ­a Civil MatemÃ¡tica": [
      {
        id: "MA3403",
        name: "Ecuaciones Diferenciales",
        code: "MA3403",
        description: "MÃ©todos analÃ­ticos y numÃ©ricos para resolver ecuaciones diferenciales"
      },
      {
        id: "MA4402",
        name: "OptimizaciÃ³n",
        code: "MA4402",
        description: "TeorÃ­a y algoritmos de optimizaciÃ³n matemÃ¡tica para problemas complejos"
      },
      {
        id: "MA5405",
        name: "Modelamiento EstocÃ¡stico",
        code: "MA5405",
        description: "AnÃ¡lisis probabilÃ­stico y simulaciÃ³n de sistemas estocÃ¡sticos"
      }
    ],
    "IngenierÃ­a Civil ElÃ©ctrica": [
      {
        id: "EL3104",
        name: "SeÃ±ales y Sistemas",
        code: "EL3104",
        description: "AnÃ¡lisis y procesamiento de seÃ±ales en sistemas lineales"
      },
      {
        id: "EL4104",
        name: "ElectrÃ³nica de Potencia",
        code: "EL4104",
        description: "DiseÃ±o de convertidores y sistemas de control para alta potencia"
      },
      {
        id: "EL5002",
        name: "Comunicaciones Digitales",
        code: "EL5002",
        description: "ModulaciÃ³n, codificaciÃ³n y transmisiÃ³n de informaciÃ³n digital"
      }
    ],
    "AstronomÃ­a": [
      {
        id: "AS3405",
        name: "AstrofÃ­sica Estelar",
        code: "AS3405",
        description: "Estructura, evoluciÃ³n y clasificaciÃ³n de estrellas"
      },
      {
        id: "AS4401",
        name: "CosmologÃ­a",
        code: "AS4401",
        description: "Origen, estructura y evoluciÃ³n del universo"
      },
      {
        id: "AS5505",
        name: "RadioastronomÃ­a",
        code: "AS5505",
        description: "TÃ©cnicas observacionales en el espectro de radio"
      }
    ]
  };

  const courses = coursesMap[departmentId] || [];
  const { bgColor, icon } = departmentStyles[departmentId] || { bgColor: "bg-gray-50", icon: "ðŸ“š" };

  if (courses.length === 0) {
    return null;
  }

  const handleCourseSelect = (courseId: string) => {
    setSelectedCourse(courseId);

    // Scroll to professors section with a smooth animation after a short delay
    setTimeout(() => {
      if (professorsScrollRef.current) {
        const yOffset = -60; // 60px of space above the professors list
        const y = professorsScrollRef.current.getBoundingClientRect().top + window.pageYOffset + yOffset;
        window.scrollTo({ top: y, behavior: 'smooth' });
      }
    }, 100);
  };

  const handleProfessorSelect = (professorId: string) => {
    if (selectedCourse) {
      router.push(`/course/${selectedCourse}/professor/${professorId}`);
    }
  };

  return (
    <>
      <div className={`${bgColor} rounded-lg shadow-sm p-6 border border-gray-100`}>
        <div className="flex items-center mb-6">
          <span className="text-3xl mr-3">{icon}</span>
          <h2 className="text-2xl font-semibold text-gray-800">Cursos de {departmentId}</h2>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
          {courses.map((course) => {
            const isSelected = selectedCourse === course.id;
            const selectedClass = isSelected
              ? 'ring-2 ring-blue-500 border-blue-500 bg-blue-50 shadow-md'
              : '';

            return (
              <button
                key={course.id}
                onClick={() => handleCourseSelect(course.id)}
                className={`p-5 bg-white border border-gray-200 rounded-lg hover:border-blue-500 hover:shadow-md transition-all text-left ${selectedClass}`}
                aria-label={`Seleccionar curso de ${course.name}`}
                aria-pressed={isSelected}
              >
                <div className="flex justify-between items-start mb-2">
                  <h3 className="font-medium text-gray-900 text-lg">{course.name}</h3>
                  <span className="inline-block px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-md">
                    {course.code}
                  </span>
                </div>
              </button>
            );
          })}
        </div>
      </div>

      {selectedCourse && (
        <>
          {/* Invisible element that serves as a reference for scrolling */}
          <div ref={professorsScrollRef} className="h-16" id="professors-scroll-anchor" />
          <div className="animate-fadeIn pb-10">
            <CourseProfessorsList
              courseId={selectedCourse}
              onSelectProfessor={handleProfessorSelect}
            />
          </div>
        </>
      )}
    </>
  );
};

export default DepartmentCourses; 